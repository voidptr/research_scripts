# pull out the columns that correspond with physical modularity and put them together. Then output.

# Written in Python 2.7
# RCK
# 3-24-11


import gzip
import math
import numpy
from optparse import OptionParser

# Set up options
usage = """usage: %prog [options] task_inst_ct_start task_inst_ct_finish task_length_start task_length_finish std_start std_finish pos_start pos_finish infile

Permitted types for outfile are png, pdf, ps, eps, and svg"""
parser = OptionParser(usage)
parser.add_option("-v", "--verbose", action = "store_true", dest = "verbose",
                  default = False, help = "print extra messages to stdout")
parser.add_option("-d", "--debug_messages", action = "store_true", dest = "debug_messages",
                  default = False, help = "print debug messages to stdout")

## fetch the args
(options, args) = parser.parse_args()

## parameter errors
if len(args) < 5:
    parser.error("incorrect number of arguments")

## column numbers
task_inst_ct_start = int(args[0])
task_inst_ct_finish = int(args[1])
task_length_start = int(args[2])
task_length_finish = int(args[3])
task_position_std_start = int(args[4])
task_position_std_finish = int(args[5])
instruction_positions_start = int( args[6] )
instruction_positions_finish = int( args[7] )


## input filename
inputfilename = args[8]

## populate the optimal std #s for tasks
optimal_task_std = [0.0, 0.0, 0.5, 0.81649658092772603, 1.1180339887498949, 1.4142135623730951, 
1.707825127659933, 2.0, 2.2912878474779199, 2.5819888974716112, 2.8722813232690143, 
3.1622776601683795, 3.4520525295346629, 3.7416573867739413, 4.0311288741492746, 4.3204937989385739, 
4.6097722286464435, 4.8989794855663558, 5.1881274720911268, 5.4772255750516612, 5.7662812973353983, 
6.0553007081949835, 6.3442887702247601, 6.6332495807107996, 6.9221865524317288, 7.2111025509279782, 
7.5, 7.7888809636986149, 8.0777472107017552, 8.3666002653407556, 8.6554414483991895, 
8.9442719099991592, 9.2330926563096938, 9.5219045713904666, 9.8107084351742913, 10.099504938362077, 
10.388294694831615, 10.677078252031311, 10.965856099730654, 11.254628677422755, 11.543396380615196, 
11.832159566199232, 12.120918557051139, 12.409673645990857, 12.698425099200294, 12.987173159185438, 
13.275918047351754, 13.564659966250536, 13.853399101544236, 14.142135623730949, 14.430869689661812, 
14.719601443879744, 15.008331019803634, 15.297058540778355, 15.58578412100805, 15.874507866387544, 
16.163229875244614, 16.451950239004088, 16.740669042783207, 17.029386365926403, 17.318102282486574, 
17.606816861659009, 17.895530168173281, 18.184242262647807, 18.472953201911167, 18.761663039293719, 
19.050371824892729, 19.339079605813716, 19.627786426390522, 19.916492328386209, 20.20519735117675, 
20.493901531919196, 20.782604905705796, 21.071307505705477, 21.360009363293827, 21.648710508172691, 
21.937410968480304, 22.22611077089287, 22.51480994071828, 22.803508501982758, 23.092206477510977, 
23.380903889000241, 23.669600757089249, 23.958297101421877, 24.246992940706413, 24.535688292770594, 
24.824383174612819, 25.113077602449817, 25.401771591761076, 25.690465157330259, 25.979158313283875,
26.267851073127396, 26.556543449779003, 26.845235455601181, 27.13392710243027, 27.422618401604176, 
27.711309363988317, 28.0, 28.288690319631268, 28.577380332470412, 28.866070047722118, 
29.154759474226502, 29.443448620476961, 29.732137494637009, 30.02082610455615, 30.309514457784815, 
30.598202561588483, 30.886890422960999, 31.175578048637153, 31.464265445104548, 31.752952618614856, 
32.041639575194445, 32.330326320654422, 32.619012860600179, 32.907699200440412, 33.196385345395662,
33.485071300506441, 33.773757070640912, 34.062442660502199, 34.351128074635334, 34.639813317433841,
34.928498393145958, 35.217183305880667, 35.505868059613285, 35.794552658190881, 36.083237105337432,
36.371921404658657, 36.660605559646719, 36.949289573684631, 37.237973450050511, 37.526657191921586,
37.815340802378074, 38.104024284406847, 38.392707640904931, 38.681390874682883, 38.970073988467952,
39.258756984907201, 39.547439866570379, 39.836122635952748, 40.124805295477756, 40.413487847499624,
40.702170294305766, 40.990852638119151, 41.279534881100588, 41.568217025350826, 41.856899072912697,
42.145581025773033, 42.434262885864605, 42.722944655067963, 43.011626335213137, 43.300307928081374,
43.588989435406738, 43.877670858877636, 44.166352200138363, 44.455033460790467, 44.743714642394188,
45.032395746469746, 45.321076774498643, 45.609757727924844, 45.89843860815602, 46.187119416564613, 
46.475800154489001, 46.764480823234493, 47.053161424074368, 47.341841958250846, 47.630522426976029,
47.919202831432827, 48.207883172775801, 48.496563452132015, 48.785243670601872, 49.073923829259876,
49.362603929155384, 49.651283971313369, 49.939963956735092, 50.228643886398793, 50.517323761260357,
50.806003582253936, 51.094683350292584, 51.383363066268835, 51.672042731055249, 51.96072234550504, 
52.249401910452526, 52.53808142671371, 52.82676089508675, 53.115440316352455, 53.404119691274758, 
53.692799020601143, 53.981478305063121, 54.270157545376634, 54.55883674224247, 54.847515896346664,
55.136195008360886, 55.424874078942807, 55.713553108736477, 56.002232098372652, 56.290911048469155, 
56.5795899596312, 56.868268832451719, 57.156947667511666, 57.445626465380286, 57.734305226615483, 
58.022983951764033, 58.311662641361892, 58.600341295934449, 58.889019915996791, 59.177698502053964,
59.466377054601196, 59.755055574124157, 60.043734061099165, 60.332412515993425, 60.621090939265244,
60.909769331364245, 61.198447692731555, 61.48712602380003, 61.775804324994425, 62.064482596731601, 
62.353160839420696, 62.641839053463301, 62.930517239253646, 63.219195397178744, 63.507873527618607,
63.796551630946325, 64.085229707528299, 64.373907757724325, 64.662585781887813, 64.951263780365863,
65.239941753499437, 65.528619701623498, 65.817297625067127, 66.105975524153635, 66.394653399200749,
66.683331250520666, 66.972009078420214, 67.260686883200947, 67.54936466515926, 67.838042424586519, 
68.126720161769128, 68.415397876988678, 68.704075570522022, 68.992753242641356, 69.281430893614399,
69.570108523704349, 69.858786133170113, 70.147463722266309, 70.436141291243374, 70.724818840347695,
71.01349636982161, 71.302173879903549, 71.590851370828105, 71.879528842826076, 72.168206296124609, 
72.456883730947197, 72.745561147513783, 73.034238546040854, 73.322915926741487, 73.611593289825393,
73.900270635499027, 74.188947963965632, 74.477625275425282, 74.76630257007497, 75.054979848108687, 
75.343657109717384, 75.632334355089156, 75.921011584409229, 76.209688797859997, 76.498365995621114,
76.787043177869535, 77.075720344779569, 77.364397496522912, 77.653074633268702, 77.941751755183603,
78.230428862431779, 78.519105955175007, 78.80778303357269, 79.096460097781872, 79.385137147957366, 
79.673814184251697, 79.962491206815216, 80.251168215796085, 80.539845211340378, 80.828522193592036,
81.117199162692984, 81.405876118783127, 81.694553062000409, 81.983229992480773, 82.271906910358325,
82.560583815765256, 82.84926070883192, 83.137937589686857, 83.426614458456839, 83.715291315266896, 
84.003968160240305, 84.292644993498698, 84.581321815161999, 84.869998625348558, 85.158675424175073,
85.44735221175668, 85.736028988206968, 86.024705753638003, 86.313382508160345]

def calcstd_ratio( std, inst_count ):
    if std == 0:
        return 1 ## this is either because the task is one instruction long or 0 instructions long. :/

    opt_std = optimal_task_std[ inst_count ]
    return opt_std/float(std)

def calc_gapstats( positions ):
    positions = positions.split(',') ## split on commas
    positions = [ int(position) for position in positions ]

    if len(positions) <= 1: ## daaaang
        return (0,0,0,0)

    gaps = []
    for i in range(1, len(positions) ):
        gaps.append( (positions[i] - positions[i-1]) - 1 )
    #print gaps


    results = (numpy.mean( gaps ), numpy.median( gaps ), numpy.var( gaps ), numpy.std( gaps ))
    return results

if inputfilename[-3:] == ".gz":
    fd = gzip.open(inputfilename)
else:
    fd = open(inputfilename)

if options.verbose:
    print "Processing: '" + inputfilename + "'"

## build an array of values from the file.
for line in fd:
    line = line.strip() ## strip off the end of line crap

    if len(line) == 0 or line[0] == '#': ## if the line is blank or a comment
        continue

    line = line.split() ## break the line up on spaces

    task_inst_ct = []
    for i in range(task_inst_ct_start - 1, task_inst_ct_finish):
        task_inst_ct.append( int(line[i]) )

    task_length = []
    for i in range(task_length_start - 1, task_length_finish):
        task_length.append( int(line[i]) )

    task_position_std = []
    for i in range(task_position_std_start - 1,task_position_std_finish):
        task_position_std.append( float(line[i]) )

    unity = []
    for i in range(0, len(task_inst_ct)):
        if task_inst_ct[i] == 0:
            unity.append( 0 )
        else:
            unity.append( task_inst_ct[i] / float(task_length[i] ) )
    average_unity = numpy.mean( unity )

    scatter = []
    for i in range(0, len(task_inst_ct)):
        if task_inst_ct[i] == 0:
            scatter.append( 0 )
        else:
            scatter.append( 1 - calcstd_ratio( task_position_std[i], task_inst_ct[i] ) )
    average_scatter = numpy.mean( scatter )

    gap_stats = []
    for i in range(instruction_positions_start - 1, instruction_positions_finish):
        if len(line[i]) == 0:
            gap_stats.append( (-1, -1, -1, -1) ) # mean, median, variance, std
        else:
            gap_stats.append( calc_gapstats( line[i] ) ) 

#    print gap_stats

    gap_stats_strings = []
    for gap_stat in gap_stats:
        gap_stats_strings.append( ",".join( [ str(val) for val in gap_stat ] ) )

    print ",".join( [ str(mod) for mod in unity ] ) + "," + str(average_unity) + "," + \
          ",".join( [ str(mod) for mod in scatter ] ) + "," + str(average_scatter) + "," + \
          ",".join( gap_stats_strings )
fd.close()

